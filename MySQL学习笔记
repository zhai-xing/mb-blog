<!DOCTYPE html><html lang="zh-CN"><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=2"><meta name="theme-color" content="#FFF"><link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon.png"><link rel="icon" type="image/ico" sizes="32x32" href="/images/favicon.ico"><link rel="mask-icon" href="/images/logo.svg" color=""><link rel="manifest" href="/images/manifest.json"><meta name="msapplication-config" content="/images/browserconfig.xml"><meta http-equiv="Cache-Control" content="no-transform"><meta http-equiv="Cache-Control" content="no-siteapp"><link rel="alternate" type="application/rss+xml" title="星辰驿站" href="http://dj_zhaixing.gitee.io/rss.xml"><link rel="alternate" type="application/atom+xml" title="星辰驿站" href="http://dj_zhaixing.gitee.io/atom.xml"><link rel="alternate" type="application/json" title="星辰驿站" href="http://dj_zhaixing.gitee.io/feed.json"><link rel="stylesheet" href="//fonts.googleapis.com/css?family=Mulish:300,300italic,400,400italic,700,700italic%7CFredericka%20the%20Great:300,300italic,400,400italic,700,700italic%7CNoto%20Serif%20JP:300,300italic,400,400italic,700,700italic%7CNoto%20Serif%20SC:300,300italic,400,400italic,700,700italic%7CInconsolata:300,300italic,400,400italic,700,700italic&display=swap&subset=latin,latin-ext"><link rel="stylesheet" href="/css/app.css?v=0.2.5"><meta name="keywords" content="原理,学习笔记"><link rel="canonical" href="http://dj_zhaixing.gitee.io/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0"><title>MySQL学习笔记 - MySQL | Pick stars = 星辰驿站 = =别怕路长梦远，总有星河照耀=</title><meta name="generator" content="Hexo 6.3.0"></head><body itemscope itemtype="http://schema.org/WebPage"><div id="loading"><div class="cat"><div class="body"></div><div class="head"><div class="face"></div></div><div class="foot"><div class="tummy-end"></div><div class="bottom"></div><div class="legs left"></div><div class="legs right"></div></div><div class="paw"><div class="hands left"></div><div class="hands right"></div></div></div></div><div id="container"><header id="header" itemscope itemtype="http://schema.org/WPHeader"><div class="inner"><div id="brand"><div class="pjax"><h1 itemprop="name headline">MySQL学习笔记</h1><div class="meta"><span class="item" title="创建时间：2023-09-04 22:46:36"><span class="icon"><i class="ic i-calendar"></i> </span><span class="text">发表于</span> <time itemprop="dateCreated datePublished" datetime="2023-09-04T22:46:36+08:00">2023-09-04</time> </span><span class="item" title="本文字数"><span class="icon"><i class="ic i-pen"></i> </span><span class="text">本文字数</span> <span>14k</span> <span class="text">字</span> </span><span class="item" title="阅读时长"><span class="icon"><i class="ic i-clock"></i> </span><span class="text">阅读时长</span> <span>13 分钟</span></span></div></div></div><nav id="nav"><div class="inner"><div class="toggle"><div class="lines" aria-label="切换导航栏"><span class="line"></span> <span class="line"></span> <span class="line"></span></div></div><ul class="menu"><li class="item title"><a href="/" rel="start">Pick stars</a></li></ul><ul class="right"><li class="item theme"><i class="ic i-sun"></i></li><li class="item search"><i class="ic i-search"></i></li></ul></div></nav></div><div id="imgs" class="pjax"><img src="https://blog-1259743669.cos.ap-chengdu.myqcloud.com/image-20230905225131183.png"></div></header><div id="waves"><svg class="waves" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 24 150 28" preserveAspectRatio="none" shape-rendering="auto"><defs><path id="gentle-wave" d="M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z"/></defs><g class="parallax"><use xlink:href="#gentle-wave" x="48" y="0"/><use xlink:href="#gentle-wave" x="48" y="3"/><use xlink:href="#gentle-wave" x="48" y="5"/><use xlink:href="#gentle-wave" x="48" y="7"/></g></svg></div><main><div class="inner"><div id="main" class="pjax"><div class="article wrap"><div class="breadcrumb" itemscope itemtype="https://schema.org/BreadcrumbList"><i class="ic i-home"></i> <span><a href="/">首页</a></span><i class="ic i-angle-right"></i> <span class="current" itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem"><a href="/categories/MySQL/" itemprop="item" rel="index" title="分类于 MySQL"><span itemprop="name">MySQL</span></a><meta itemprop="position" content="1"></span></div><article itemscope itemtype="http://schema.org/Article" class="post block" lang="zh-CN"><link itemprop="mainEntityOfPage" href="http://dj_zhaixing.gitee.io/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0"><span hidden itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="image" content="/images/avatar.jpg"><meta itemprop="name" content="摘星"><meta itemprop="description" content="=别怕路长梦远，总有星河照耀=, 欢迎来到摘星的小破站，这里你可以阅读我的学习笔记并提出独到的见解~我们将互相学习交流知识，共同进步"></span><span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization"><meta itemprop="name" content="星辰驿站"></span><div class="body md" itemprop="articleBody"><h1 id="一-mysql基础篇"><a class="anchor" href="#一-mysql基础篇">#</a> 一、 Mysql 基础篇</h1><h4 id="语句执行流程"><a class="anchor" href="#语句执行流程">#</a> 语句执行流程</h4><h5 id="mysql查询语句执行流程"><a class="anchor" href="#mysql查询语句执行流程">#</a> mysql 查询语句执行流程：</h5><ol><li>建立连接：这里需要验证身份和权限</li><li>查询缓存 (如果有缓存则直接返回缓存数据，如果木有则进行下一步，需要注意，如果有增删改操作会清除掉缓存)</li><li>解析器：先做词法分析、再做语法分析 (注：表不存在或者字段不存在，并不是在解析器)</li><li>执行器： 执行器有三个阶段，预处理阶段、优化阶段、执行阶段</li><li>返回数据</li></ol><ul><li><p>词法分析主要是识别关键字构成语法树，这样方便后面的模块得到关键字、表名</p></li><li><p>语法分析主要是分析语法是否正确</p></li><li><p>预处理阶段：检查表名、列名是否存在 将 * 号换成所有列</p></li><li><p>优化阶段：优化器主要是将 sql 语句的执行计划确定下来，例如索引的选择、</p></li><li><p>执行阶段：执行器就会和存储引擎交互了，交互是以记录为单位的。<br><img data-src="https://blog-1259743669.cos.ap-chengdu.myqcloud.com/image-20230905225131183.png" alt="image-20230905225131183"><br>mysql 更新语句执行流程：<br>更新语句同样需要走一次查询数据的流程，但数据的更新是在存储引擎中做的，在本文中存储引擎选择的是 Innodb。更新流程需要有日志的辅助，</p></li><li><p>重做日志: redo Log 是物理日志，记录了某个数据页做了什么修改，每当执行一个事务就会产生一条或者多条物理日志。<mark>事务提交时</mark>，先将 redo log 持久化到磁盘即可。并且 redo 是可重用的，也就是说空间大小是可设置的，从头开始写，写到末尾又回到开头写， redo log 解决了事务中的持久性。这里到了一个 WAL 技术，<br><mark>WAL 技术指的是，MySQL 的写操作并不是立刻写到磁盘上，而是先写日志，然后在合适的时间再写到磁盘上。</mark></p></li><li><p>回滚日志: undo log 是 Innodb 存储引擎层生成的日志，实现了事务中的原子性，主要用于事务回滚和 MVCC。<br><mark>每开始一个事务都会分配一个 undo 空间，在事务没提交之前 Innodb 会先记录更新前的数据到 undo log 中</mark>，当需要执行回滚时 就执行一条相反的操作。undo log 有两个参数：roll_pointer 指针和一个 trx_id 事务 id，通过 trx_id 可以知道该记录是被哪个事务修改的；通过 roll_pointer 指针可以将这些 undo log 串成一个链表，形成版本链。<br><mark>当事务提交后 相关的 undo 日志记录会被标记为 &quot;已提交&quot;，这些已提交的 undo 日志记录会在后续的清理过程中被回收和删除</mark><br><mark>实现事务回滚，保障事务的原子性：如果出现了错误或者用户执行了 ROLLBACK 语句，可以利用 undo log 中的历史数据将数据恢复到事务开始之前的状态。</mark></p></li><li><p>归档日志 ：Server 层生成的日志，主要用于数据备份和主从复制。binlog 是 server 层的日志，不同的存储引擎都可用， 而上面两个是 innoDB 独有的，在完成一条更新操作后，Server 层会生成一条 binlog，等之后事务提交的时候，会将该事物执行过程中产生的所有 binlog 统一写入 binlog 文件。binlog 文件是记录了所有数据库表结构变更和表数据修改的日志，不会记录查询类的操作。<br>1. 执行器负责具体执行，会调用存储引擎的接口，通过索引获取到要操作的数据的记录</p></li></ul><ol start="2"><li>执行器得到聚簇索引记录后 会查看更新前和更新后的数据是否一致，如果一致就不执行。</li><li>开启事务，innodb 在执行操作前需要先开启事务，InnoDB 层更新记录前，首先要记录相应的 undo log，因为这是更新操作，需要把被更新的列的旧值记下来</li><li>innodb 层开始更新记录，会先更新内存（同时标记为脏页），然后将记录写到 redo log 里面，这个时候更新就算完成了</li><li>至此一条记录更新完成了</li><li>在一条更新语句执行完成后，然后开始记录该语句对应的 binlog</li><li>事务提交，事务提交分为两个阶段<ul><li>prepare 阶段：将 redo log 对应的事务状态设置为 prepare，然后将 redo log 刷新到硬盘；</li><li>commit 阶段：将 binlog 刷新到磁盘，接着调用引擎的提交事务接口，将 redo log 状态设置为 commit（将事务设置为 commit 状态后，刷入到磁盘 redo log 文件）；<br>8. 至此，一条更新语句执行完成。</li></ul></li></ol><h1 id="二-日志篇"><a class="anchor" href="#二-日志篇">#</a> 二、日志篇</h1><p>mysql 日志文件分为三种:</p><h3 id="undo-log-回滚日志"><a class="anchor" href="#undo-log-回滚日志">#</a> undo log 回滚日志</h3><p>回滚日志是 Innodb 存储引擎层生成的日志，实现了事务中的原子性，主要是用于事务回滚和 MVCC, 考虑一个问题，一个事务在执行过程中还没有提交事务，mysql 发生了崩溃，就需要 undo log 来回滚到事务之前的数据去。<br>undo log 是一种用于撤销回退的日志。在事务没提交之前，MySQL 会先记录更新前的数据到 undo log 日志文件里面，当事务回滚时，可以利用 undo log 来进行回滚。<br><img data-src="https://blog-1259743669.cos.ap-chengdu.myqcloud.com/image-20230905225157734.png" alt="image-20230905225157734"><br>原理：<br>每当 innodb 引擎对一条记录进行操作时，要把回滚时需要的信息都记录到 undolog 里，发生回滚时就读取 undolog 的数据，做相反操作。不同的操作，记录的内容也不一样<br>另外 undolog +readview 实现了 MVCC：</p><ol><li>对于读提交隔离级别是在每个 select 都会生成一个新的 read view 也意味着事务期间多次读取同一个数据 前后两次读的数据可能会出现不一致，因为另外一个事务修改了记录并提交了</li><li>对于可重复读级别，是启动事务时生成了一个 read view 然后整个事务期间都在用整个 read view 这样就保证了事务期间读到的数据都是事务启动前的记录。<br><mark>undo log 和数据页的刷盘策略是一样的，都需要通过 redo log 保证持久化。</mark></li></ol><h3 id="redo-log-重做日志"><a class="anchor" href="#redo-log-重做日志">#</a> redo log 重做日志</h3><p>为了防止断电导致数据丢失的问题，当有一条记录需要更新的时候 innodb 引擎会先更新内存，然后将本次对整个页的修改以 redolog 的形式记录下来，就算更新完成了，后续 innodb 会在适当的时候由后台线程将缓存在 BufferPool 的脏页刷新到磁盘，这就是 WAL 技术，WAL 技术是指 MYSQL 的写操作并不是立刻写到磁盘上，而是先写日志，然后在合适的时间再写入到磁盘</p><ol><li>redolog 有自己的内存缓存，</li><li>redolog 有刷盘机制可手动配置</li><li>InnoDB 存储引擎有 1 个重做日志文件组 ( redo log Group） 是一个文件组写完了可以循环写，防止丢失</li></ol><h4 id="undo和-redo的区别"><a class="anchor" href="#undo和-redo的区别">#</a> undo 和 redo 的区别</h4><p>这两种日志是属于 InnoDB 存储引擎的日志，它们的区别在于：<br>redo log 记录了此次事务「完成后」的数据状态，记录的是更新之后的值；<br>undo log 记录了此次事务「开始前」的数据状态，记录的是更新之前的值；<br><mark>事务提交之前发生了崩溃，重启后会通过 undo log 回滚事务，事务提交之后发生了崩溃，重启后会通过 redo log 恢复事务，</mark></p><h3 id="binglog-归档日志"><a class="anchor" href="#binglog-归档日志">#</a> binglog 归档日志</h3><p>binglog 主要是做备份和主从复制的，并且 binglog 是 server 层的日志，是全量日志，<br>而前面俩都是 Innodb 的日志，换一个存储引擎就没有了。binlog 是追加写，一个文件写满了就创建一个新的继续写，不会覆盖日志，但是 redolog 会覆盖，<br>binglog 日志有三种格式</p><ol><li>StateNet: 每一条修改数据的 sql 都会被记录到 binlog 中，，主从复制时，可以直接运行语句复现，STATEMENT 有动态函数的问题，比如你用了 uuid 或者 now 这些函数，你在主库上执行的结果并不是你在从库执行的结果，这种随时在变的函数会导致复制的数据不一致；</li><li>row：记录行数据最终被修改的样子，<br>4.mixed 包含了 statement 和 row 模式，会根据不同情况自动使用上面的两种日志</li></ol><h1 id="三-mysql事务"><a class="anchor" href="#三-mysql事务">#</a> 三、MySQL 事务</h1><p>插入一条数据发生了什么？<br>使用 Innodb 引擎时执行增删改操作时，会自动在 Innodb 引擎层开启事务。<br>ACID</p><ul><li>原子性：事务最小工作单元，要么全成功，要么全失败（重做日志了实现的）</li><li>一致性：事务开始和结束后，数据库的完整性不会被破坏</li><li>隔离性：不同事务之间互不影响，（是通过 MVCC 来实现的）<ol><li>读未提交 RU：一个事务读取到另一个事务未提交的数据。（会出现脏读）</li><li>读已提交（RC)：一个事务读取到另一个事务已经提交的数据，（会出现不可重复读，同一个 sql 语句在一个事务里面读到的数据不一致）</li><li>可重复读 (RR)：一个事务只能读到另一个已经提交的事务修改的数据（会出现幻读，一个事务因读取到另一个事务已提交的 insert 数据或者 dlete 数据，导致对同一张表读取两次以上的结果不一致。查询结果是多条记录时，才有可能出现幻读。）</li><li>串行化：</li></ol></li><li>持久性：事务提交后，对数据的修改是永久性的，即使系统故障也不会丢失。（回滚日志来实现的）</li></ul><h3 id="并行事务会引发什么问题"><a class="anchor" href="#并行事务会引发什么问题">#</a> 并行事务会引发什么问题</h3><ul><li>脏读：一个事务读到了另一个未提交事务修改过的数据</li><li>不可重复读：一个事务内两次读取数据出现不一致的情况，</li><li>幻读：在一个事务内多次查询某个符合查询条件的记录数量，如果出现前后两次查询到的记录数量不一致，就是幻读。</li></ul><h3 id="事务与mvcc底层原理详解"><a class="anchor" href="#事务与mvcc底层原理详解">#</a> 事务与 MVCC 底层原理详解</h3><p>MVCC 实现了两个事务隔离级别，可重复读和读已提交，MVCC 使数据库读不加锁，提高了数据库的并发处理能力，多版本并发控制仅仅是一种技术理念，没有统一的标准，其核心理念就是快照，不同的事务访问不同版本的数据快照，从而实现不同的事务隔离级别。<br><img data-src="https://blog-1259743669.cos.ap-chengdu.myqcloud.com/image-20230905225220682.png" alt="image-20230905225220682"></p><ul><li><p>m_ids ：指的是在创建 Read View 时，当前数据库中活跃事务的事务 id 列表，活跃事务指的就是，启动了但还没提交的事务。</p></li><li><p>min_trx_id ：指的是在创建 Read View 时，当前数据库中活跃事务中事务 id 最小的事务，也就是 m_ids 的最小值。</p></li><li><p>max_trx_id ：创建 Read View 时当前数据库中应该给下一个事务的 id 值，也就是全局事务中最大的事务 id 值 + 1。</p></li><li><p>creator_trx_id ：指的是创建该 Read View 的事务的事务 id。</p></li><li><p>如果记录的 trx_id 值小于 Read View 中的 min_trx_id 值，表示这个版本的记录是在创建 Read View 前已经提交的事务生成的，所以该版本的记录对当前事务可见。</p></li><li><p>如果记录的 trx_id 值大于等于 Read View 中的 max_trx_id 值，表示这个版本的记录是在创建 Read View 后才启动的事务生成的，所以该版本的记录对当前事务不可见。</p></li><li><p>如果记录的 trx_id 值在 Read View 的 min_trx_id 和 max_trx_id 之间，需要判断 trx_id 是否在 m_ids 列表中：</p><ul><li>如果记录的 trx_id 在 m_ids 列表中，表示生成该版本记录的活跃事务依然活跃着 (还没提交事务)，所以该版本的记录对当前事务不可见。</li><li>如果记录的 trx_id 不在 m_ids 列表中，表示生成该版本记录的活跃事务已经被提交，所以该版本的记录对当前事务可见。</li></ul></li></ul><h3 id="如何解决幻读"><a class="anchor" href="#如何解决幻读">#</a> 如何解决幻读</h3><p>分为快照读和当前读</p><h4 id="快照读"><a class="anchor" href="#快照读">#</a> 快照读</h4><p>通过 MVCC 方式解决幻读，可重复读隔离级别下，事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一直的。即使中途有其他事务写入了一条数据，也是查不出来的。<br><mark>对于快照读， MVCC 并不能完全避免幻读现象</mark>。<mark>当事务 A 更新了一条事务 B 插入的记录，那么事务 A 前后两次查询的记录条目就不一样了，所以就发生幻读</mark></p><h4 id="当前读"><a class="anchor" href="#当前读">#</a> 当前读</h4><p>通过 next-key lock 方式解决了幻读，因为当执行 select for update 语句的时候会加上 next key lock 如果有其他事务在锁范围内插入了已经语句 这个插入语句就会被阻塞.</p><h4 id="lbcc-基于锁的并发控制"><a class="anchor" href="#lbcc-基于锁的并发控制">#</a> LBCC 基于锁的并发控制。</h4><p>一个事务去读一个数据库的时候就加上锁，不允许其他事务操作</p><h4 id="innodb的mvcc实现"><a class="anchor" href="#innodb的mvcc实现">#</a> Innodb 的 MVCC 实现</h4><p>MVCC 在 mysql 中的实现是依赖的 undo log 和 read view<br>MVCC 只支持两种隔离级别 分别是：读已提交，可重复读<br>根据不同的行为，undo log 分为两种 insert undo log 和 update undo log<br>insert undo log 是在 inser 操作下产生的 undo log<br>因为 insert 操作的记录只对事务本身可见，对于其他事务</p><h4 id="读提交的实现"><a class="anchor" href="#读提交的实现">#</a> 读提交的实现</h4><p>读提交隔离级别是在每次读取数据时，都会生成一个新的 Read View。事务期间的多次读取同一条数据，前后两次读的数据可能会出现不一致，因为可能这期间另外一个事务修改了该记录，并提交了事务</p><h1 id="四-mysq锁篇"><a class="anchor" href="#四-mysq锁篇">#</a> 四、Mysq 锁篇</h1><h3 id="锁介绍"><a class="anchor" href="#锁介绍">#</a> 锁介绍</h3><p>范围分：全局锁，表级锁，行级锁<br>根据功能分：共享锁（s)，排他锁 (x)，<br>全局锁就是对整个数据库实例枷锁，加锁后整个数据库就处于只读状态，后续的 MDL ，DDL 语句 和已经更新操作的提交语句都将被阻塞，一般应用于数据库全局备份时，保证数据完整性和一致性。<br>加锁命令：flush table with read lock;<br>释放锁 unlock tables;<br>一般是在数据库做备份的时候才使用全局锁，但是会带来问题，全局锁会导致数据库在时间内处于只读状态，会导致业务停滞，<br>解决方案，如果数据库引擎支持的事务支持可重复读的隔离级别，那么在备份数据库之前可先开启事务，会先创建 ReadView 然后整个事务执行期间都在使用这个 ReadView ，而且在可重复读的情况下，即使其他业务更新数据库，也不会有影响。</p><hr><p>表级锁 (server 实现的): 有四种 读锁，写锁，元数据锁</p><ol><li>表级共享锁：lock table 表名 read;</li><li>表级排他锁: lock table 表名 write</li><li>元数据锁： 在一个事务中对一个表进行查询操作不允许其他会话对表结构进行修改，就在表上加元数据锁</li><li>自增锁：使用自增字段时，使用自增主键保证主键不冲突</li><li>意向锁：当执行插入、更新、删除操作，需要先对表加上「意向独占锁」，然后对该记录加独占锁。<br>那么有了「意向锁」，由于在对记录加独占锁前，先会加上表级别的意向独占锁，那么在加「独占表锁」时，直接查该表是否有意向独占锁，如果有就意味着表里已经有记录被加了独占锁，这样就不用去遍历表里的记录<br>意向锁的目的是为了快速判断表里释放有记录被加锁</li></ol><hr><p>行级锁<br><strong>要求必须使用 Innodb 引擎</strong></p><ul><li>记录锁：锁定索引中的一条记录</li><li>间隙锁：要么锁住索引记录中间的值，要么锁住第一个索引记录前面的值或者最后一个索引记录后面的值</li><li>临健锁：是索引记录上的记录锁和在索引记录之前的间隙锁的组合（间隙锁 + 记录锁）</li><li>插入意向锁： 做 insert 操作时添加的对记录 id 的锁<br>记录锁：根据主键等值更新时使用记录锁<br>共享记录锁: select * from where id=1 lock inshare mode<br>排他记录锁: select * from where id=1 for update;<br>意向锁就是一个标志位，表示当前表中，是否有行锁<br>意向锁分为：行锁：S 意向锁：IS; 行锁 X 意向锁：IX<br>间隙锁：仅仅锁住一个索引区间，在记录和记录之间的范围区间就是间隙，间隙锁就是加在区间之上，防止插入数据，目的就是幻读 (读一个范围数据，读到了其他数据插入的数据) 在更新过程中，不仅需要对记录加锁还需要在记录与记录之间加锁，加的就是间隙锁。<br>临键锁：就是记录锁 + 间隙锁，是一个左开右闭区间</li></ul><h3 id="死锁的产生"><a class="anchor" href="#死锁的产生">#</a> 死锁的产生</h3><p>有两个会话，互相持有对方所需要的资源。</p><h4 id="如何避免死锁"><a class="anchor" href="#如何避免死锁">#</a> 如何避免死锁・</h4><p>1、注意程序逻辑，最常见的就是更新表，程序的更新过程最好意思一致的<br>2、保持事务的轻量，越是轻量的事务，占有越少的锁资源，这样发生死锁的概率就很低了<br>3、提高运行速度，避免使用子查询，尽量使用主键等<br>4、尽快提交事务，减少持有锁的时间，事务越早提交，锁就越早释放。</p><h1 id="五-索引"><a class="anchor" href="#五-索引">#</a> 五、索引</h1><p>什么是索引，帮助快速查找数据的一个数据结构。索引可以说是数据的目录，<br><img data-src="https://blog-1259743669.cos.ap-chengdu.myqcloud.com/image-20230905225256269.png" alt="image-20230905225256269"><br>索引分类<br>按数据结构来分，可以分为，B + 树索引，Hash 索引，Full-text 索引<br>按物理存储分类：聚簇索引 (主键索引)，二级索引 (辅助索引)<br>按字段特性分类： 主键索引、唯一索引、普通索引、前缀索引<br>按字段个数分类： 单列索引，联合索引。<br>如果有主键，默认会使用主键作为聚簇索引的索引键（key）；<br>如果没有主键，就选择第一个不包含 NULL 值的唯一列作为聚簇索引的索引键（key）；<br>在上面两个都没有的情况下，InnoDB 将自动生成一个隐式自增 id 列作为聚簇索引的索引键（key）；</p><h4 id="什么时候需要索引"><a class="anchor" href="#什么时候需要索引">#</a> 什么时候需要索引：</h4><p>字段有唯一性限制的<br>经常用于 where 查询条件的字段，<br>经常用于 group by 和 order by 的字段，这样查询的时候就不需要再去做一次排序了，</p><h4 id="什么时候不需要创建索引"><a class="anchor" href="#什么时候不需要创建索引">#</a> 什么时候不需要创建索引</h4><p>字段中有大量重复数据的，比如性别<br>表数据很少的时候<br>经常更新的字段不需要索引，比如余额</p><h4 id="优化索引的方法"><a class="anchor" href="#优化索引的方法">#</a> 优化索引的方法</h4><ol><li><p><strong>前缀索引优化</strong><br>就是使用某个字段中字符串的前几个字符建立索引，使用前缀索引可以减少索引字段的大小，但是 order by 无法使用前缀索引，无法把前缀索引当做覆盖索引使用</p></li><li><p><strong>覆盖索引优化</strong><br>在索引 B + 树的叶子节点上都能找到的那些索引。可以建立联合索引，商品 id 姓名，作为一个联合索引，可以避免回表。</p></li><li><p><strong>主键索引最好自增</strong><br>那么每次插入的新数据就会按顺序添加到当前索引节点的位置，不需要移动已有的数据，当页面写满，就会自动开辟一个新页面。因为每次插入一条新记录，都是追加操作，不需要重新移动数据</p></li><li><p><strong>索引最后设置为 NOT NULL</strong><br>如果索引列存在 NULL 会导致优化器在做索引选择的时候更加复杂，更加难以优化，因为可为 NULL 的列会使索引、索引统计和值比较都更复杂，比如进行索引统计时，count 会省略值为 NULL 的行。<br>NULL 值是一个没意义的值，但是它会占用物理空间</p></li><li><p><strong>防止索引失效</strong><br>1. 当使用左或者左右模糊匹配的时候，也就是 like % xx 或者 like % xx% 这两种方法都会造成索引失效。</p></li><li><p>当我们在查询条件中对索引列做了计算、函数、类型转换后也会导致失效。</p></li><li><p>联合索引要遵循最左匹配原则不然也会失效。</p></li><li><p>where 子句中，如果 or 前的条件列是索引，而 or 后的条件不是所有，那么也会导致索引失效。</p></li></ol><p>All（全表扫描）<br>index（全索引扫描）<br>range（索引范围扫描）<br>ref（非唯一索引扫描）<br>eq_ref（唯一索引扫描）<br>const（结果只有一条的主键或唯一索引扫描）</p><h4 id="count-是什么"><a class="anchor" href="#count-是什么">#</a> count () 是什么？</h4><p>count () 是一个聚合函数，函数的参数不仅可以是字段名，也可以是其他任意表达式，该函数作用是统计符合查询条件的记录中，函数指定的参数不为 NULL 的记录有多少个。</p><h3 id="索引的数据结构"><a class="anchor" href="#索引的数据结构">#</a> 索引的数据结构</h3><p>Mysql 的索引数据结构选用的是 B + 树，为什么选用呢？<br>索引至少要支持等值查询和范围查询。</p><h4 id="选择hash表做查询"><a class="anchor" href="#选择hash表做查询">#</a> 选择 Hash 表做查询</h4><p>如果是等值查询，hash 的性能是很好的，但是无法做范围查询，空间复杂度较高。</p><h4 id="二叉查找树"><a class="anchor" href="#二叉查找树">#</a> 二叉查找树</h4><p>这个是可以做等着查询和范围查询的，但是极端情况下，可能会退化成链表。</p><h4 id="平衡二叉查找树"><a class="anchor" href="#平衡二叉查找树">#</a> 平衡二叉查找树</h4><p>查找的时间复杂度和树的高度有关，树有多高就需要查找多少次，每个节点的读取都对应着一次 IO 操作，在表数据量变大时，树的高度也会变大，查询效率下降严重<br>并且平衡二叉查找树，不支持范围快速查找，范围查询时，需要通过根结点多次遍历。查询效率不高</p><h4 id="b树"><a class="anchor" href="#b树">#</a> B 树</h4><p>改造了二叉树，在一个节点上存多个数值，可以将树的高度变矮，降低磁盘的读取 IO;<br>B 树是一种多叉平衡查找树</p><p>B 树：非叶子节点和叶子节点都会存储数据。<br>b 树缺点：</p><ol><li>B 树不支持范围查询的快速查找，如果我们想要查找 15 和 26 之间的数据，查找到 15 之后，需要回到<br>根节点重新遍历查找，需要从根节点进行多次遍历，查询效率有待提高。</li><li>如果 data 存储的是行记录，行的大小随着列数的增多，所占空间会变大。这时，一个页中可存储的<br>数据量就会变少，树相应就会变高，磁盘 IO 次数就会变大</li></ol><h4 id="b树-2"><a class="anchor" href="#b树-2">#</a> B + 树</h4><p>而 B + 树只在叶子节点上存储数据，且使用链表将叶子节点连接起来。</p><h4 id="为什么用b树不用b树"><a class="anchor" href="#为什么用b树不用b树">#</a> 为什么用 B + 树不用 B 树</h4><p>B + 树相对于 B 树在磁盘 IO 操作上具有优势，尤其适用于范围查询和索引场景</p><p>在进行查询操作时，B 树可能需要在内部节点上进行多次访问才能达到叶子节点，而 B + 树由于只有叶子节点存储数据，所以查询时只需一次访问。</p><h3 id="mysql索引实现"><a class="anchor" href="#mysql索引实现">#</a> mysql 索引实现</h3><h4 id="myisam引擎"><a class="anchor" href="#myisam引擎">#</a> MyIsam 引擎</h4><p>主键索引实现是使用了 B + 树，MyISAM 在查询时，会将索引节点缓存在 MySQL 缓存中，而数据缓存依赖于操作系统自身的缓存。</p><h4 id="innodbt引擎"><a class="anchor" href="#innodbt引擎">#</a> Innodbt 引擎</h4><p>索引和数据文件是放在一起的，Innodb 引擎要求每张表必须有主键索引，<br>每个 InnoDB 表都有一个聚簇索引 ，聚簇索引使用 B + 树构建，叶子节点存储的数据是整行记录。一般<br>情况下聚簇索引等同于主键索引，当一个表没有创建主键索引时，InnoDB 会自动创建一个 ROWID 字<br>段来构建聚簇索引。</p><p>在使用辅助索引时，数据会回表，除聚簇索引之外的所有索引都称为辅助索引，InnoDB 的辅助索引只会存储主键值而非磁盘地址，<br>使用辅助索引需要检索两遍索引：首先检索辅助索引获得主键，然后使用主键到主索引中检索获得记<br>录。根据在辅助索引树中获取的主键 id，到主键索引树检索数据的过程称为回表查询。回表会有性能损耗，所以也有说在 Innodb 引擎里使用辅助索引，性能不如 MyIsam 引擎，因为在 Mysaml 里面辅助索引和主索引是相同的。</p><h5 id="innodb组合索引"><a class="anchor" href="#innodb组合索引">#</a> Innodb 组合索引</h5><p>组合索引就是一个字段包含多个索引。<br>如何存储的呢，是根据创建索引时的字段先后顺序，假设组合索引是 (a,b,c) , 那么在建立索引存储结构 B + 树时，就先按照 a 字段排序，当 a 字段相同时 ，就按 b 字段排序，当 b 字段相同时，就按 c 字段排序，在写 sql 语句的时候，要按照索引创建的顺序去写条件</p><h5 id="最左前缀匹配原则"><a class="anchor" href="#最左前缀匹配原则">#</a> 最左前缀匹配原则</h5><h4 id="什么情况下适合建立索引"><a class="anchor" href="#什么情况下适合建立索引">#</a> 什么情况下适合建立索引</h4><ol><li>频繁出现在 where 条件 order 排序 group 分组 字段中的列</li><li>select 频繁查询的列，考虑是否创建联合索引</li><li>多表 join 关联查询 ，on 两边的字段都应该创建索引</li></ol><h4 id="索引优化"><a class="anchor" href="#索引优化">#</a> 索引优化</h4><ol><li>表记录很少不需创建索引 （索引是要有存储的开销）</li><li>频繁更新的字段不适合创建索引</li><li>区分度低的字段不适合建立索引，例如性别，会导致扫描行数过多，再加上回表查询的消耗。如果使用索引，比全表扫描的性能还要差。这些字段一般会用在组合索引中。</li><li>在 InnoDB 存储引擎中，主键索引建议使用自增的长整型，避免使用很长的字段。</li><li>不建议用无序的值作为索引。例如身份证、UUID，更新数据时会发生频繁的页分裂，页内数据不紧凑，浪费磁盘空间。</li><li>尽量创建组合索引，而不是单列索引，一个组合索引等于多个单列索引<br>创建原则：组合索引应该把把频繁的列，区分度高的值放在前面。频繁使用代表索引的利用率高，<br>区分度高代表筛选粒度大，可以尽量缩小筛选范围</li></ol><h1 id="六-架构篇"><a class="anchor" href="#六-架构篇">#</a> 六、架构篇</h1><h4 id="mysql文件类型"><a class="anchor" href="#mysql文件类型">#</a> mysql 文件类型：</h4><p>日志文件：<br>错误日志<br>通用日志：默认是关闭的，可以手动开启，，通用查询日志会记录用户所有的操作，<br>binlog: 二进制日志，做 Mysql 主从复制时使用<br>慢查询日志: mysql 调优时使用，默认关闭，<br>数据文件：<br>记录表结构、数据、索引信息<br>InnoDB ，MyIsam 等<br>不同的存储引擎，生成的文件也不一样<br>在文件管理系统中 mysql 的 一个数据库对应一个目录，<br>frm 文件类型：表结构定义文件<br>MYD 文件 Mylasm 引擎创建的表，存储表中数据<br>MYI: 文件 Mylasm 引擎创建的表，存储表中索引<br>ibd 文件 InnoDB 引擎创建的表，其中包含表中数据和索引<br>MyIsam 引擎创建的表有三个文件<br>InnoDB 引擎创建的表有两个文件<br>同一个数据库中，不同的表可以使用不同的数据引擎，Mysql5.5 开始默认使用 InnoDB 之前是使用的 mylsam，</p><h4 id="mysql架构"><a class="anchor" href="#mysql架构">#</a> MYSQL 架构：</h4><pre><code>大致分为两层:
mysqlServer层: 连接池、优化器、执行器等组件
存储引擎层： Innodb，以及其他引擎，基本可以忽略 
</code></pre><p>![](…/…/B69V2_(NQHU5$@Q[S18C9S9%201.png)<br>Mysql8 中缓存被移除了，在 mysql5.7 中依然存在，默认是关闭的，<br>缓存的缺点：<br>1、需要占用大量的内存空间<br>2、维护缓存需要成本。<br>3、命中率不高<br>在同一个 sql 语句会反复执行时，可以开启，可以使用命令查看缓存命中率</p><p>分析器：<br>先对 sql 进行词法分析，语法分析<br>优化器：<br>执行器：</p><p>存储引擎<br>Mysql 有多个自带存储引擎，也可以自己去安装第三方的存储引擎，<br>使用 show engines 查看 mysql 中自带的存储引擎<br><strong>除非需要用到某些 Innodb 不具备的特性，并且没有其他办法可以替代，否则都应该选择 Innodb 引擎</strong><br>MEMORY ：内存引擎。把数据和索引全部放到内存中。缺点是，数据库一旦重启，表数据就丢失了，表结构不会丢失；优点速度快，</p><p>Innode 引擎：<br>由，内存池，后台线程，磁盘文件三大部分组成，<br>内存结构:<br>redo log buffer（重做日志缓冲区) 保证 Mysql 数据库完整性的重要组成部分<br>buffer poll 缓冲池<br>数据页缓存<br>索引页缓存<br>change buffer 修改缓冲区（插入缓冲区），修改数据之后需要更新辅助索引，为了提高性能暂时先不更新，把要更新的操作放到缓冲区（change buffer）中。<br>自适应哈希索引：完全由 mysql 管理，无法人工干预，<br>磁盘结构：<br>1・系统表空间：ibdata1<br>数据字典<br>双写缓冲区<br>修改缓冲区，内存中的 changebuffer 的映射<br>回滚段，undolog<br>2、用户表空间（每个表一个）<br>默认情况下，每个表都对应一个 ibd 文件，就是用户表空间，用户的数据和索引都保存在用户表空间中<br>3、通用表空间<br>默认没有这个文件的，在 mysql 中，使用 create tablespace 命令创建的表空间就通用表空间。<br>4、回滚表空间<br>默认是没有的，undo tablespace 默认是在系统表空间中，<br>5、临时表空间，<br>默认也是没有的，当使用临时表时才出现。<br>6、redolog 重做日志文件<br>就是 mysql 数据库数据完整性的重要保障文件。<br>由一组文件组成：<br>ib logfile0<br>iblogfile1<br>两个文件循环使用，文件不会增长。</p><h2 id="二-innodb架构组织"><a class="anchor" href="#二-innodb架构组织">#</a> 二、Innodb 架构组织</h2><h3 id="innodb磁盘文件结构"><a class="anchor" href="#innodb磁盘文件结构">#</a> Innodb 磁盘文件结构</h3><p>InnoDB 的主要的磁盘文件主要分为三大块：一是系统表空间，二是用户表空间，三是 redo 日志文件和归档文件<br>三个表空间的区别，redo 是日志：保证 mysql 数据不丢失的重要环节，采用 WAL 顺序写实现，系统表空间和用户表空间采用的就是随机写，</p><ol><li>redolog 文件:<br>由一组文件组成，默认是两个文件:ib_logfile0 和 ib_logfile1, 循环写入，文件 1 写满之后写文件 2，文件 2 写满之后写文件 1，会覆盖之前的内容。</li><li>系统表空间：<br>文件中 ibdata1, 这就是系统表空间文件，其中包含<br>1. 数据字典<br>2. 双写缓冲区<br>3. 修改缓冲区<br>4. 回滚日志</li><li>用户表空间：<br>默认每个表对应一个表空间文件。*.ibd 文件，是可配置的，由 innodb_file_per_table 参数控制默认是 true. 其中包含表中的数据和索引信息。<br>用户表空间结构：<br>ibd 表空间文件<br>分段： 段下面分成若干个区，每个区分成若干页（默认 16k）（数据读写以页为单位，页里面存储的数据行，行大小取决于表结构），数据页的大小可以通过参数 innode_page_size 来进行调整；</li></ol><p>而通用表空间和临时表空间用的不多。</p><p><img data-src="https://blog-1259743669.cos.ap-chengdu.myqcloud.com/image-20230905225348775.png" alt="image-20230905225348775"></p><h4 id="1-innodb的内存结构"><a class="anchor" href="#1-innodb的内存结构">#</a> 1、Innodb 的内存结构</h4><p>1、redolog buffer ：为了减少磁盘的 io，尽量将 redolog 相关的内容先写到缓冲区中，然后在合适的时机，将缓冲区的数据写到磁盘，合适的时机，就是 commit 操作，在 commit 之前，先把 redologBuffer 中的数据写入到 redolog 文件，如果写入成功那么 commit 成功，如果写入失败则 commit 失败。<br>[innodb_flush_log_at_trx_commit] 参数 是 commiit 操作时写 redolog 的行为 ，默认值配置的是 1；</p><ol><li>属性值 为 0 时，事务提交时，不会对重做日志进行写入操作，而是等待主线程按时写入，每秒写入一次，</li><li>当属性值为 1 时，事务提交时，会将重做日志写入文件系统缓存，并且调用文件系统的 fsync，将文件系统缓冲区的数据真正写入磁盘存储，确保不会出现数据丢失；（fsync 是操作系统的函数）</li><li>当属性值为 2 时，事务提交时，也会将日志文件写入文件系统缓存，但是不会调用文件系统的 fsync , 而是让文件系统直接去判断何时将缓存写入磁盘。</li></ol><h4 id="2-buffer-poll-缓存池"><a class="anchor" href="#2-buffer-poll-缓存池">#</a> 2、Buffer poll 缓存池</h4><p>包含内容，数据页 (16k)，索引页，自适应 hash 索引，双写缓冲区，修改缓冲区（插入缓冲区）</p><ol><li>数据页：当对数据进行修改时，先把对应的数据页（16k) 放到内存中，然后再进行修改操作，此时内存数据页和磁盘数据页不一致，此时内存的数据页和磁盘的数据页不一致，内存的数据页就形成了脏页，一旦事务提交，就会记录到 redolog，记录了对数据的修改，保证数据安全。当查询数据时，以内存数据为准。</li><li>索引页：一旦向表中插入数据或者修改数据时，把索引页放到内存中，在内存中进行修改，数据安全同样是由 redolog 保证的。</li><li>自适应 hash 索引：Innodb 会根据分为频率和模式，为热点页建立哈希索引，来提高查询效率。不用我们自己维护。</li><li>双写缓冲区：内存数据落盘时，需要使用双写缓冲区。</li><li>修改缓冲区：也叫插入缓冲区，主要是对辅助索引修改时做的一个缓冲，辅助索引就是非主键索引。在早期版本中主要是针对插入操作。在新版本中，修改和删除页进行了缓冲</li></ol><h4 id="3-内存数据落盘重要"><a class="anchor" href="#3-内存数据落盘重要">#</a> 3、内存数据落盘（重要）</h4><p>当要做增删改操作时，会对 Buffer pool 操作时， 先写 rdo log 到缓冲，然后进行落盘操作，<br>checkPoint 触发时机:<br>假设如果重做日志可以无限增大，同时缓冲池页足够大，那么是不需要将缓冲池页的新版本刷回磁盘，因为当发生宕机时，完全可以通过重做日志来恢复整个数据库系统中的数据到宕机发生时刻。需要两个前提， 缓冲池中可以缓存数据库中的所有数据，重做日志可以无限增大。</p><p>因此就有了 checkPoint，主要解决了 1、缩短数据库恢复时间，2、缓冲池不够用时，将脏页刷新到磁盘，3. 重做日志不可用时刷新脏页<br>checkPonint 分类：可分为 sharp checkPonint (强制) 和 fuzzy checkPonint (模糊) ：<br>sharp checkPoint ：仅在关闭数据库的时候，将 BufferPool 中的脏页全部刷新到磁盘中，<br>fuzzy checkPoint : 数据库正常运行时，在不同的时机，将部分脏页写入磁盘，仅刷新部分脏页到磁盘。避免一次性刷新全部脏页造成性能问题。<br>有四个时机：<br>1、Master Thread CheckPoint : 主线程定时将脏页写入磁盘，每秒将脏页写入，定时落盘<br>2、FLUSH_LRU_LIST CheckPoint 当 buffer pool 中脏页需要被淘汰时触发 checkpoint。<br>3、Async/sync Flush CheckPoint ; 异步或者同步落盘操作。跟 redolog 相关的，<br>4、Dirty Page too much CheckPoint ：buffer pool 中脏页过多时落盘，这个指标可配置</p><h4 id="4-脏页落盘过程"><a class="anchor" href="#4-脏页落盘过程">#</a> 4、脏页落盘过程</h4><p>双写机制：<br>1、先把脏页写到 double write buffer (内存双写缓冲区)<br>2、把 double write buffer 的数据先写到系统表空间，<br>3、把缓冲区的数据写入用户表空间中；<br>4、如果写入系统表空间发生意外导致失败，可以使用用户表空间的数据页 + redolog 恢复数据。<br>5、如果系统表空间写入成功，用户表空间写入失败，可以使用系统表空间备份的数据页来恢复用户表空间的数据页。<br>使用双写机制，保证数据落盘过程万无一失。防止再写的过程中断电，造成数据丢失。</p><h1 id="七-mysql性能优化篇"><a class="anchor" href="#七-mysql性能优化篇">#</a> 七、MYSQl 性能优化篇</h1><ol><li>首先需要使用慢查询日志，去获取查询时间比较长的 SQL 语句</li><li>查看执行计划，查看有问题的 SQL 执行计划</li><li>针对查询慢的 SQL 语句进行优化</li><li>使用 SHOW profile 查看有问题的 SQL 性能使用情况</li><li>调整操作系参数优化</li><li>升级服务器硬件</li></ol><p>需要手动开启慢查询日志，需要设置阈值。</p><p>#临时开启慢查询日志命令<br>set global slow_query_log=ON<br>set global long_query_time=1<br># 数据库重启失效，长期开启需要去配置文件启动</p><h4 id="分析慢查询日志的工具"><a class="anchor" href="#分析慢查询日志的工具">#</a> 分析慢查询日志的工具</h4><p>explain 命令 查看执行计划</p><h4 id="查看执行执行"><a class="anchor" href="#查看执行执行">#</a> 查看执行执行</h4><p>使用 explain 命令 可以对 SQL 语句的执行计划进行分析</p><p>id: SELECT 查询的标识符。每个 SELECT 都会自动分配一个唯一的标识符.<br>select_type: SELECT 查询的类型.<br>table: 查询的是哪个表<br>partitions: 匹配的分区<br>type: join 类型 查询类型<br>possible_keys: 此次查询中可能选用的索引<br>key: 此次查询中确切使用到的索引.<br>ref: 哪个字段或常数与 key 一起被使用<br>rows: 显示此查询一共扫描了多少行。这个是一个估计值.<br>filtered: 表示此查询条件所过滤的数据的百分比<br>extra: 额外的信息</p><h4 id="sql语句的优化"><a class="anchor" href="#sql语句的优化">#</a> SQL 语句的优化</h4><h5 id="1-索引的优化"><a class="anchor" href="#1-索引的优化">#</a> 1、索引的优化</h5><p>为搜索字段、排序字段、select 查询列建立合适的索引。<br>尽量建立组合索引，并注意顺序<br>尽量使用覆盖索引<br>索引长度尽可能短，短索引可以节省空间<br>索引的更新不能频繁，更新频繁的数据不适合建索引</p><h5 id="2-limit优化"><a class="anchor" href="#2-limit优化">#</a> 2、limit 优化</h5><p>如果预计查询结果只有一个，建议使用 limit 1 可以停止全表扫描<br>处理分页会使用到 limit 当翻页到后面的时候偏移量会非常大， limit offset size<br>limit 优化问题，其实是 offset 的问题，他会导致 mysql 扫描大量不需要的行再抛弃掉。<br>3、其他查询优化<br>小表驱动大表，建议使用 left join 时，以小表关联大表，<br>避免全表扫描<br>where 条件中尽量使用 Not in 语句建议使用 not exists<br>合理利用慢查询日志，explain 执行查询计划，show profile 查看 sql 执行时的资源使用情况</p><p>4、服务器端优化<br>缓冲区优化，设置足够大的 innodb_buffer_pool_size 将数据读取到内存中，<br>降低磁盘写入次数，对于生产环境来说，部分日志是可以不用的，<br>mysql 数据库配置优化 设置缓冲池内存大小<br>日志落盘配置</p><p>5、操作系统优化<br>内核参数优化</p><p>6、服务器硬件优化<br>提升硬件设备，例如选择尽量高频率的内存（频率不能高于主板的支持）、提升网络带宽、使用 SSD 高<br>速磁盘、提升 CPU 性能等。</p><h1 id="七-mysql集群篇"><a class="anchor" href="#七-mysql集群篇">#</a> 七、MySQL 集群篇</h1><h2 id="主从复制"><a class="anchor" href="#主从复制">#</a> 主从复制</h2><p>2、binlog 和 relay 日志<br>bin log 记录了所有数据的更改，用于本机数据恢复和主从同步<br>relayz log ：中继日志</p><ol><li>mysql 主节点将 binlog 写入本地，从节点定时请求增量 binlog，主节点将 binlog 同步到从节点</li><li>从节点单独进程会将 binlog 拷贝至本地 relaylog 中</li><li>从节点定时重放 relay log。</li></ol><p>binlog 的日志模式：<br>1.statement level 模式（日志有小概率无法同步的）<br>2.rowlevel 模式 (比较耗存储性能)<br>3.mixed 模式（实际上就是前两种模式的结合，在 mixed 模式下）<br>在配置文件中开启开启 binlog</p><pre><code>#binlog刷盘策略
sync_binlog=1

0 ：存储引擎不进行binlog的刷新到磁盘，而由操作系统的文件系统控制缓存刷新。
1：每提交一次事务，存储引擎调用文件系统的sync操作进行一次缓存的刷新，这种方式最安全，但性
能较低。
n：当提交的日志组=n时，存储引擎调用文件系统的sync操作进行一次缓存的刷新。


#需要备份的数据库
binlog-do-db=hello
#不需要备份的数据库
binlog-ignore-db=mysql
#启动二进制文件
log-bin=mysql-bin
#服务器ID
server-id=132
</code></pre><p>调整 binlog 日志模式<br>binlog 的三种格式： STATEMENT 、 ROW 、 MIXED 。</p><p>查看 bin log 和 relay log 日志<br>因为 binlog 日志文件：mysql-bin.000005 是二进制文件，没法用 vi 等打开，这时就需要 mysql 的自带的<br>mysqlbinlog 工具进行解码，执行： mysqlbinlog mysql-bin.000005 可以将二进制文件转为可阅读的<br>sql 语句。</p><p>3、基于 binlog 主从复制<br>关闭主从机器的防火墙</p><p>主从复制存在一定延迟问题，并且只保证主机对外提供服务，只是在后台为主机进行备份。<br>配置流程<br>主服务器配置：</p><ol><li>先做数据同步将主服务器的数据全量复制到从服务器</li><li>主服务器上配置开启 binlog</li><li>在主服务器上对复制数据的用户做授权操作</li><li>使用 show master status 语句查看主服务器状态<br>从服务器配置：</li><li>配置从服务器的 server-id 参数，在 My.cnf 文件中配置</li><li>如果从服务器使用的是虚拟机，并且是通过克隆得到的虚拟机，需要删除 auto.cnf 文件，重启服务器，会重新生成此文件</li><li>重启 mysql 服务</li><li>change master to 命令</li></ol><h2 id="读写分离"><a class="anchor" href="#读写分离">#</a> 读写分离</h2><p>学习书籍：</p><p>《从根上理解 mysql》</p><p>《小林 Coding》</p><div class="tags"><a href="/tags/%E5%8E%9F%E7%90%86/" rel="tag"><i class="ic i-tag"></i> 原理</a> <a href="/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/" rel="tag"><i class="ic i-tag"></i> 学习笔记</a></div></div><footer><div class="meta"><span class="item"><span class="icon"><i class="ic i-calendar-check"></i> </span><span class="text">更新于</span> <time title="修改时间：2023-09-05 23:17:35" itemprop="dateModified" datetime="2023-09-05T23:17:35+08:00">2023-09-05</time> </span><span id="/MySQL学习笔记" class="item leancloud_visitors" data-flag-title="MySQL学习笔记" title="阅读次数"><span class="icon"><i class="ic i-eye"></i> </span><span class="text">阅读次数</span> <span class="leancloud-visitors-count"></span> <span class="text">次</span></span></div><div class="reward"><button><i class="ic i-heartbeat"></i> 赞赏</button><p>请我喝[茶]~(￣▽￣)~*</p><div id="qr"><div><img data-src="/images/wechatpay.png" alt="摘星 微信支付"><p>微信支付</p></div><div><img data-src="/images/alipay.png" alt="摘星 支付宝"><p>支付宝</p></div><div><img data-src="/images/paypal.png" alt="摘星 贝宝"><p>贝宝</p></div></div></div><div id="copyright"><ul><li class="author"><strong>本文作者： </strong>摘星 <i class="ic i-at"><em>@</em></i>星辰驿站</li><li class="link"><strong>本文链接：</strong> <a href="http://dj_zhaixing.gitee.io/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0" title="MySQL学习笔记">http://dj_zhaixing.gitee.io/MySQL学习笔记</a></li><li class="license"><strong>版权声明： </strong>本站所有文章除特别声明外，均采用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzQuMC9kZWVkLnpo"><i class="ic i-creative-commons"><em>(CC)</em></i>BY-NC-SA</span> 许可协议。转载请注明出处！</li></ul></div></footer></article></div><div class="post-nav"><div class="item left"><a href="/IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8" itemprop="url" rel="prev" data-background-image="https:&#x2F;&#x2F;ts1.cn.mm.bing.net&#x2F;th&#x2F;id&#x2F;R-C.ab0f21c6aa0fc715d15f0910c6c01a22?rik&#x3D;0qORqv3I1mD2iA&amp;riu&#x3D;http%3a%2f%2fpic.bizhi360.com%2fbbpic%2f77%2f9877_6.jpg&amp;ehk&#x3D;RsuvqCfkkV%2fT9di9xvjlv15eCDgzJqwZIvQXis73Spc%3d&amp;risl&#x3D;&amp;pid&#x3D;ImgRaw&amp;r&#x3D;0" title="IO模式"><span class="type">上一篇</span> <span class="category"><i class="ic i-flag"></i> 计算机基础</span><h3>IO模式</h3></a></div><div class="item right"><a href="/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0" itemprop="url" rel="next" data-background-image="https:&#x2F;&#x2F;blog-1259743669.cos.ap-chengdu.myqcloud.com&#x2F;020a1051d89f40bd92ad4ce455860ff5.jpg" title="Redis学习笔记"><span class="type">下一篇</span> <span class="category"><i class="ic i-flag"></i> Redis</span><h3>Redis学习笔记</h3></a></div></div><div class="wrap" id="comments"></div></div><div id="sidebar"><div class="inner"><div class="panels"><div class="inner"><div class="contents panel pjax" data-title="文章目录"><ol class="toc"><li class="toc-item toc-level-1"><a class="toc-link" href="#%E4%B8%80-mysql%E5%9F%BA%E7%A1%80%E7%AF%87"><span class="toc-number">1.</span> <span class="toc-text">一、 Mysql 基础篇</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B"><span class="toc-number">1.0.0.1.</span> <span class="toc-text">语句执行流程</span></a><ol class="toc-child"><li class="toc-item toc-level-5"><a class="toc-link" href="#mysql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B"><span class="toc-number">1.0.0.1.1.</span> <span class="toc-text">mysql 查询语句执行流程：</span></a></li></ol></li></ol></li></ol><li class="toc-item toc-level-1"><a class="toc-link" href="#%E4%BA%8C-%E6%97%A5%E5%BF%97%E7%AF%87"><span class="toc-number">2.</span> <span class="toc-text">二、日志篇</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#undo-log-%E5%9B%9E%E6%BB%9A%E6%97%A5%E5%BF%97"><span class="toc-number">2.0.1.</span> <span class="toc-text">undo log 回滚日志</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#redo-log-%E9%87%8D%E5%81%9A%E6%97%A5%E5%BF%97"><span class="toc-number">2.0.2.</span> <span class="toc-text">redo log 重做日志</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#undo%E5%92%8C-redo%E7%9A%84%E5%8C%BA%E5%88%AB"><span class="toc-number">2.0.2.1.</span> <span class="toc-text">undo 和 redo 的区别</span></a></li></ol></li><li class="toc-item toc-level-3"><a class="toc-link" href="#binglog-%E5%BD%92%E6%A1%A3%E6%97%A5%E5%BF%97"><span class="toc-number">2.0.3.</span> <span class="toc-text">binglog 归档日志</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E4%B8%89-mysql%E4%BA%8B%E5%8A%A1"><span class="toc-number">3.</span> <span class="toc-text">三、MySQL 事务</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%B9%B6%E8%A1%8C%E4%BA%8B%E5%8A%A1%E4%BC%9A%E5%BC%95%E5%8F%91%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98"><span class="toc-number">3.0.1.</span> <span class="toc-text">并行事务会引发什么问题</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E4%BA%8B%E5%8A%A1%E4%B8%8Emvcc%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3"><span class="toc-number">3.0.2.</span> <span class="toc-text">事务与 MVCC 底层原理详解</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E5%B9%BB%E8%AF%BB"><span class="toc-number">3.0.3.</span> <span class="toc-text">如何解决幻读</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#%E5%BF%AB%E7%85%A7%E8%AF%BB"><span class="toc-number">3.0.3.1.</span> <span class="toc-text">快照读</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E5%BD%93%E5%89%8D%E8%AF%BB"><span class="toc-number">3.0.3.2.</span> <span class="toc-text">当前读</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#lbcc-%E5%9F%BA%E4%BA%8E%E9%94%81%E7%9A%84%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6"><span class="toc-number">3.0.3.3.</span> <span class="toc-text">LBCC 基于锁的并发控制。</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#innodb%E7%9A%84mvcc%E5%AE%9E%E7%8E%B0"><span class="toc-number">3.0.3.4.</span> <span class="toc-text">Innodb 的 MVCC 实现</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E8%AF%BB%E6%8F%90%E4%BA%A4%E7%9A%84%E5%AE%9E%E7%8E%B0"><span class="toc-number">3.0.3.5.</span> <span class="toc-text">读提交的实现</span></a></li></ol></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E5%9B%9B-mysq%E9%94%81%E7%AF%87"><span class="toc-number">4.</span> <span class="toc-text">四、Mysq 锁篇</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E9%94%81%E4%BB%8B%E7%BB%8D"><span class="toc-number">4.0.1.</span> <span class="toc-text">锁介绍</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E6%AD%BB%E9%94%81%E7%9A%84%E4%BA%A7%E7%94%9F"><span class="toc-number">4.0.2.</span> <span class="toc-text">死锁的产生</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E6%AD%BB%E9%94%81"><span class="toc-number">4.0.2.1.</span> <span class="toc-text">如何避免死锁・</span></a></li></ol></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E4%BA%94-%E7%B4%A2%E5%BC%95"><span class="toc-number">5.</span> <span class="toc-text">五、索引</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E9%9C%80%E8%A6%81%E7%B4%A2%E5%BC%95"><span class="toc-number">5.0.0.1.</span> <span class="toc-text">什么时候需要索引：</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%B8%8D%E9%9C%80%E8%A6%81%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95"><span class="toc-number">5.0.0.2.</span> <span class="toc-text">什么时候不需要创建索引</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E4%BC%98%E5%8C%96%E7%B4%A2%E5%BC%95%E7%9A%84%E6%96%B9%E6%B3%95"><span class="toc-number">5.0.0.3.</span> <span class="toc-text">优化索引的方法</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#count-%E6%98%AF%E4%BB%80%E4%B9%88"><span class="toc-number">5.0.0.4.</span> <span class="toc-text">count () 是什么？</span></a></li></ol></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E7%B4%A2%E5%BC%95%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84"><span class="toc-number">5.0.1.</span> <span class="toc-text">索引的数据结构</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#%E9%80%89%E6%8B%A9hash%E8%A1%A8%E5%81%9A%E6%9F%A5%E8%AF%A2"><span class="toc-number">5.0.1.1.</span> <span class="toc-text">选择 Hash 表做查询</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91"><span class="toc-number">5.0.1.2.</span> <span class="toc-text">二叉查找树</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91"><span class="toc-number">5.0.1.3.</span> <span class="toc-text">平衡二叉查找树</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#b%E6%A0%91"><span class="toc-number">5.0.1.4.</span> <span class="toc-text">B 树</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#b%E6%A0%91-2"><span class="toc-number">5.0.1.5.</span> <span class="toc-text">B + 树</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8b%E6%A0%91%E4%B8%8D%E7%94%A8b%E6%A0%91"><span class="toc-number">5.0.1.6.</span> <span class="toc-text">为什么用 B + 树不用 B 树</span></a></li></ol></li><li class="toc-item toc-level-3"><a class="toc-link" href="#mysql%E7%B4%A2%E5%BC%95%E5%AE%9E%E7%8E%B0"><span class="toc-number">5.0.2.</span> <span class="toc-text">mysql 索引实现</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#myisam%E5%BC%95%E6%93%8E"><span class="toc-number">5.0.2.1.</span> <span class="toc-text">MyIsam 引擎</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#innodbt%E5%BC%95%E6%93%8E"><span class="toc-number">5.0.2.2.</span> <span class="toc-text">Innodbt 引擎</span></a><ol class="toc-child"><li class="toc-item toc-level-5"><a class="toc-link" href="#innodb%E7%BB%84%E5%90%88%E7%B4%A2%E5%BC%95"><span class="toc-number">5.0.2.2.1.</span> <span class="toc-text">Innodb 组合索引</span></a></li><li class="toc-item toc-level-5"><a class="toc-link" href="#%E6%9C%80%E5%B7%A6%E5%89%8D%E7%BC%80%E5%8C%B9%E9%85%8D%E5%8E%9F%E5%88%99"><span class="toc-number">5.0.2.2.2.</span> <span class="toc-text">最左前缀匹配原则</span></a></li></ol></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8B%E9%80%82%E5%90%88%E5%BB%BA%E7%AB%8B%E7%B4%A2%E5%BC%95"><span class="toc-number">5.0.2.3.</span> <span class="toc-text">什么情况下适合建立索引</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96"><span class="toc-number">5.0.2.4.</span> <span class="toc-text">索引优化</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E5%85%AD-%E6%9E%B6%E6%9E%84%E7%AF%87"><span class="toc-number">6.</span> <span class="toc-text">六、架构篇</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#mysql%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B"><span class="toc-number">6.0.0.1.</span> <span class="toc-text">mysql 文件类型：</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#mysql%E6%9E%B6%E6%9E%84"><span class="toc-number">6.0.0.2.</span> <span class="toc-text">MYSQL 架构：</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E4%BA%8C-innodb%E6%9E%B6%E6%9E%84%E7%BB%84%E7%BB%87"><span class="toc-number">6.1.</span> <span class="toc-text">二、Innodb 架构组织</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#innodb%E7%A3%81%E7%9B%98%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84"><span class="toc-number">6.1.1.</span> <span class="toc-text">Innodb 磁盘文件结构</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#1-innodb%E7%9A%84%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84"><span class="toc-number">6.1.1.1.</span> <span class="toc-text">1、Innodb 的内存结构</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#2-buffer-poll-%E7%BC%93%E5%AD%98%E6%B1%A0"><span class="toc-number">6.1.1.2.</span> <span class="toc-text">2、Buffer poll 缓存池</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#3-%E5%86%85%E5%AD%98%E6%95%B0%E6%8D%AE%E8%90%BD%E7%9B%98%E9%87%8D%E8%A6%81"><span class="toc-number">6.1.1.3.</span> <span class="toc-text">3、内存数据落盘（重要）</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#4-%E8%84%8F%E9%A1%B5%E8%90%BD%E7%9B%98%E8%BF%87%E7%A8%8B"><span class="toc-number">6.1.1.4.</span> <span class="toc-text">4、脏页落盘过程</span></a></li></ol></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E4%B8%83-mysql%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%AF%87"><span class="toc-number">7.</span> <span class="toc-text">七、MYSQl 性能优化篇</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#%E5%88%86%E6%9E%90%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97%E7%9A%84%E5%B7%A5%E5%85%B7"><span class="toc-number">7.0.0.1.</span> <span class="toc-text">分析慢查询日志的工具</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E6%9F%A5%E7%9C%8B%E6%89%A7%E8%A1%8C%E6%89%A7%E8%A1%8C"><span class="toc-number">7.0.0.2.</span> <span class="toc-text">查看执行执行</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#sql%E8%AF%AD%E5%8F%A5%E7%9A%84%E4%BC%98%E5%8C%96"><span class="toc-number">7.0.0.3.</span> <span class="toc-text">SQL 语句的优化</span></a><ol class="toc-child"><li class="toc-item toc-level-5"><a class="toc-link" href="#1-%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BC%98%E5%8C%96"><span class="toc-number">7.0.0.3.1.</span> <span class="toc-text">1、索引的优化</span></a></li><li class="toc-item toc-level-5"><a class="toc-link" href="#2-limit%E4%BC%98%E5%8C%96"><span class="toc-number">7.0.0.3.2.</span> <span class="toc-text">2、limit 优化</span></a></li></ol></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E4%B8%83-mysql%E9%9B%86%E7%BE%A4%E7%AF%87"><span class="toc-number">8.</span> <span class="toc-text">七、MySQL 集群篇</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6"><span class="toc-number">8.1.</span> <span class="toc-text">主从复制</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB"><span class="toc-number">8.2.</span> <span class="toc-text">读写分离</span></a></li></ol></li></div><div class="related panel pjax" data-title="系列文章"><ul><li><a href="/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0" rel="bookmark" title="SQL必知必会读书笔记">SQL必知必会读书笔记</a></li><li class="active"><a href="/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0" rel="bookmark" title="MySQL学习笔记">MySQL学习笔记</a></li></ul></div><div class="overview panel" data-title="站点概览"><div class="author" itemprop="author" itemscope itemtype="http://schema.org/Person"><img class="image" itemprop="image" alt="摘星" data-src="/images/avatar.jpg"><p class="name" itemprop="name">摘星</p><div class="description" itemprop="description">欢迎来到摘星的小破站，这里你可以阅读我的学习笔记并提出独到的见解~我们将互相学习交流知识，共同进步</div></div><nav class="state"><div class="item posts"><a href="/archives/"><span class="count">13</span> <span class="name">文章</span></a></div><div class="item categories"><a href="/categories/"><span class="count">15</span> <span class="name">分类</span></a></div><div class="item tags"><a href="/tags/"><span class="count">23</span> <span class="name">标签</span></a></div></nav><div class="social"></div><ul class="menu"><li class="item"><a href="/" rel="section"><i class="ic i-hemo"></i>主站</a></li><li class="item"><a href="/about/" rel="section"><i class="ic i-about"></i>关于我</a></li><li class="item"><a href="/categories/" rel="section"><i class="ic i-th"></i>分类</a></li><li class="item"><a href="/tags/" rel="section"><i class="ic i-tags"></i>标签</a></li><li class="item dropdown"><a href="javascript:void(0);"><i class="ic i-feather"></i>文章</a><ul class="submenu"><li class="item"><a href="/archives/" rel="section"><i class="ic i-list-alt"></i>归档</a></li></ul></li><li class="item dropdown"><a href="javascript:void(0);"><i class="ic i-feather"></i>链接</a><ul class="submenu"><li class="item"><a href="/friends/" rel="section"><i class="ic i-heart"></i>友链</a></li><li class="item"><a href="/links/" rel="section"><i class="ic i-magic"></i>项目链接</a></li></ul></li><li class="item"><a href="/guestbook/" rel="section"><i class="ic i-guestbook"></i>留言板</a></li></ul></div></div></div><ul id="quick"><li class="prev pjax"><a href="/IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8" rel="prev" title="上一篇"><i class="ic i-chevron-left"></i></a></li><li class="up"><i class="ic i-arrow-up"></i></li><li class="down"><i class="ic i-arrow-down"></i></li><li class="next pjax"><a href="/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0" rel="next" title="下一篇"><i class="ic i-chevron-right"></i></a></li><li class="percent"></li></ul></div></div><div class="dimmer"></div></div></main><footer id="footer"><div class="inner"><div class="widgets"><div class="rpost pjax"><h2>随机文章</h2><ul><li class="item"><div class="breadcrumb"><a href="/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/" title="分类于 计算机基础">计算机基础</a></div><span><a href="/IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8" title="IO模式">IO模式</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/MySQL/" title="分类于 MySQL">MySQL</a></div><span><a href="/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0" title="MySQL学习笔记">MySQL学习笔记</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/" title="分类于 大数据">大数据</a></div><span><a href="/Hadoop%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0" title="Hadoop集群搭建笔记">Hadoop集群搭建笔记</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/java/" title="分类于 java">java</a> <i class="ic i-angle-right"></i> <a href="/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/" title="分类于 数据结构与算法">数据结构与算法</a></div><span><a href="/Java%E5%B8%B8%E7%94%A8%E5%AE%B9%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0" title="Java常用容器学习笔记">Java常用容器学习笔记</a></span></li><li class="item"><div class="breadcrumb"></div><span><a href="/2024/08/03/hello-world/" title="Hello World">Hello World</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E5%AD%A6%E4%B9%A0/" title="分类于 代码随想录学习">代码随想录学习</a> <i class="ic i-angle-right"></i> <a href="/categories/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/" title="分类于 数据结构与算法">数据结构与算法</a></div><span><a href="/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE" title="二分查找">二分查找</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/Python/" title="分类于 Python">Python</a></div><span><a href="/Python%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4" title="Python自动化运维">Python自动化运维</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/java/" title="分类于 java">java</a></div><span><a href="/%E5%9F%BA%E4%BA%8ESpringBoot%E6%95%B4%E5%90%88SpringSecurity%E7%9A%84%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83" title="基于SpringBoot整合SpringSecurity的认证授权">基于SpringBoot整合SpringSecurity的认证授权</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/Redis/" title="分类于 Redis">Redis</a></div><span><a href="/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0" title="Redis学习笔记">Redis学习笔记</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/%E5%89%91%E6%8C%87offer/" title="分类于 剑指offer">剑指offer</a> <i class="ic i-angle-right"></i> <a href="/categories/%E5%89%91%E6%8C%87offer/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/" title="分类于 数据结构与算法">数据结构与算法</a></div><span><a href="/%E6%9C%80%E5%B0%8F%E6%A0%88" title="最小栈">最小栈</a></span></li></ul></div><div><h2>最新评论</h2><ul class="leancloud-recent-comment"></ul></div></div><div class="status"><div class="copyright">&copy; 2010 – <span itemprop="copyrightYear">2024</span> <span class="with-love"><i class="ic i-sakura rotate"></i> </span><span class="author" itemprop="copyrightHolder">摘星 @ Pick stars</span></div><div class="count"><span class="post-meta-item-icon"><i class="ic i-chart-area"></i> </span><span title="站点总字数">68k 字</span> <span class="post-meta-divider">|</span> <span class="post-meta-item-icon"><i class="ic i-coffee"></i> </span><span title="站点阅读时长">1:01</span></div></div></div></footer></div><script data-config type="text/javascript">var LOCAL={path:"/MySQL学习笔记",favicon:{show:"（●´3｀●）やれやれだぜ",hide:"(´Д｀)大変だ！"},search:{placeholder:"文章搜索",empty:"关于 「 ${query} 」，什么也没搜到",stats:"${time} ms 内找到 ${hits} 条结果"},valine:!0,fancybox:!0,copyright:'复制成功，转载请遵守 <i class="ic i-creative-commons"></i>BY-NC-SA 协议。',ignores:[function(e){return e.includes("#")},function(e){return new RegExp(LOCAL.path+"$").test(e)}]}</script><script src="https://cdn.polyfill.io/v2/polyfill.js"></script><script src="//cdn.jsdelivr.net/combine/npm/pace-js@1.0.2/pace.min.js,npm/pjax@0.2.8/pjax.min.js,npm/whatwg-fetch@3.4.0/dist/fetch.umd.min.js,npm/animejs@3.2.0/lib/anime.min.js,npm/algoliasearch@4/dist/algoliasearch-lite.umd.js,npm/instantsearch.js@4/dist/instantsearch.production.min.js,npm/lozad@1/dist/lozad.min.js,npm/quicklink@2/dist/quicklink.umd.js"></script><script src="/js/app.js?v=0.2.5"></script></body></html>